---
title: Integer-N PFD/CP-based PLL - System-Level simulation
subtitle: Laboratory 01 - Week 01-09
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
    Este trabalho apresenta duas simulações para um Integer-N PFD/CP-based PLL a nível de sistema. Uma simulação é no domínio do tempo e a outra no domínio da fase. Foram estabelecidas restrições para a operação e são apresentados os passos até a concepção dos sistemas para a simulação. Por fim, os resultados são analisados quanto ao tempo de resposta e comparados ao que foi previsto com base na teoria.
keywords: 
  - Phase-locked loop
  - Sistema de controle
  - PLL Integer-N
date: last-modified
bibliography:
  - bibliography.bib
  - zoterobibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}
          \usepackage{comment}
          \usepackage{tikz}
          \usetikzlibrary{shapes,arrows}
          \usetikzlibrary{shapes,arrows,positioning,calc}


          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: Programa de Pós-Graduação em Engenharia Elétrica
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

```{python}
#| echo: false

from IPython.display import display, Markdown

def format(value):
    abs_value = abs(value)
    if abs_value >= 1e9:
        result = f"{value / 1e9:.2f}\\,\\text{{G}}"
    elif abs_value >= 1e6:
        result = f"{value / 1e6:.2f}\\,\\text{{M}}"
    elif abs_value >= 1e3:
        result = f"{value / 1e3:.2f}\\,\\text{{k}}"
    elif abs_value >= 1:
        result = f"{value * 1e0:.2f}\\,"
    elif abs_value >= 1e-3:
        result = f"{value * 1e3:.2f}\\,\\text{{m}}"
    elif abs_value >= 1e-6:
        result = f"{value * 1e6:.2f}\\,\\mu"
    elif abs_value >= 1e-9:
        result = f"{value * 1e9:.2f}\\,\\text{{n}}"
    elif abs_value >= 1e-12:
        result = f"{value * 1e12:.2f}\\,\\text{{p}}"
    elif abs_value >= 1e-15:
        result = f"{value * 1e15:.2f}\\,\\text{{f}}"
    else:
        result = f"{value:.0e}\\,"

    return Markdown(f"${result}$")
```

```{python}
#| echo: false
import math
from IPython.display import display, Markdown

def format_with_pi_latex(value):
    pi_multiple = value / math.pi
    abs_pi_multiple = abs(pi_multiple)

    if abs_pi_multiple >= 1e9:
        result = f"{pi_multiple / 1e9:.2f}\\pi\\,\\text{{G}}"
    elif abs_pi_multiple >= 1e6:
        result = f"{pi_multiple / 1e6:.2f}\\pi\\,\\text{{M}}"
    elif abs_pi_multiple >= 1e3:
        result = f"{pi_multiple / 1e3:.2f}\\pi\\,\\text{{k}}"
    elif abs_pi_multiple >= 1:
        result = f"{pi_multiple:.2f}\\pi"
    elif abs_pi_multiple >= 1e-3:
        result = f"{pi_multiple * 1e3:.2f}\\pi\\,\\text{{m}}"
    elif abs_pi_multiple >= 1e-6:
        result = f"{pi_multiple * 1e6:.2f}\\pi\\,\\mu"
    elif abs_pi_multiple >= 1e-9:
        result = f"{pi_multiple * 1e9:.2f}\\pi\\,\\text{{n}}"
    elif abs_pi_multiple >= 1e-12:
        result = f"{pi_multiple * 1e12:.2f}\\pi\\,\\text{{p}}"
    elif abs_pi_multiple >= 1e-15:
        result = f"{pi_multiple * 1e15:.2f}\\pi\\,\\text{{f}}"
    else:
        result = f"{pi_multiple:.0e}\\pi"

    return Markdown(f"${result}$")

# Exemplo de uso:

```

# Introdução

Neste relatório, apresenta-se duas simulações a nível de sistema de um *Phase-Locked Loop* (PLL) baseado em *Phase Frequency Detector/Charge Pump* (PFD/CP). A primeira simulação é utilizando modelo de blocos no domínio de Laplace (domínio $s$), em que o sinal de entrada deste sistema é um sinal de variação da fase, dessa forma, é direta a interpretação de que o PLL é um sistema que visa minimizar a diferença de fase entre um sinal de referência e o sinal de saída.

A outra simulação apresentada neste trabalho é no domínio do tempo. Nesta simulação, é dado um sinal retangular de referência na entrada e é obtido um sinal também retangular gerado com base nessa referência para a saída. Neste exemplo, o sinal de saída é um múltiplo inteiro do sinal de referência, por isso a classificação do sistema como PLL *Integer*-N.

# Revisão

## Parâmetros do PLL

Para calcular a frequência de saída de um oscilador, utiliza-se a [Eq. @eq-frequency-operation-vco], apresentada abaixo @rogers2006IntegratedCircuitDesign.

$$
f_o=f_0 + K_\text{VCO}v_c
$$ {#eq-frequency-operation-vco}

Em que $f_0$ é a frequência de oscilação livre, $K_\text{VCO}$ é a sensibilidade (em Hz/V), $v_c$ é a tensão de controle e $f_o$ é a frequência final com o controle aplicado, dependente da sensibilidade do VCO.

Além disso, como a relação entre a frequência de referência, $f_r$, e a frequência de saída do VCO, $f_o$ é

$$
f_r=\frac{f_o}{N}
$$

É possível reescrever a [Eq. @eq-frequency-operation-vco] como

$$
Nf_r=f_0+K_\text{VCO}v_c
$$ {#eq-frequency-operation-vco-N}


Além dos ganho do VCO apresentado, este simples sistema apresentado aqui possui dois outros ganhos que não foram comentados até então; o ganho $A_0$ e $K_\theta$ ou $K_\text{phase}$. O ganho $A_0$ representa o ganho em corrente contínua e é assumido unitário nas simulações deste trabalho. O outro elemento de ganho, $K_\theta$, por sua vez é utilizado para quantizar a corrente média fornecida pelo charge pump durante um ciclo de operação. Se o charge pump conduziu pelo ciclo completo, a corrente média será $i_d=I$, se o charge pump conduziu por meio ciclo, $i_d=I/2$ e assim por diante. O que define o ângulo de condução do charge pump é a diferença (ou erro) de fase, $\theta_R-\theta_o$. Se a diferença for de $90^\circ$ ($\pi/2$), por exemplo, o carge pump vai conduzir por 1/4 do período e, portanto, $i_d=I/4$. Por isso, se tomarmos $\tau$ como o tempo de condução e $T$ o período, a definição da corrente média, $i_d$, é dada por @rogers2006IntegratedCircuitDesign

$$
i_d=I\frac{\tau}{T}=\frac{I}{2\pi}\left(\theta_R-\theta_o\right)=K_\theta\left(\theta_R-\theta_o\right)
$$



## Função de transferência simplificada

A função de transferência de malha fechada de um PLL com filtro de loop de segunda ordem no domínio da fase pode ser expresso da seguinte maneira

$$
  G(s)=\frac{\theta_o}{\theta_R}=\frac{\omega_n^2\left(\frac{2\zeta}{\omega_n}s+1\right)}{s^2+2\zeta\omega_n s+\omega_n^2}
$$ {#eq-simplified-transfer-function}

Em que $\omega_n$ é dado por

$$
\omega_n=\sqrt{\frac{IK_\text{VCO}}{2\pi\cdot NC_1}}
$$ {#eq-omega_n}

e a constante de amortecimento, $\zeta$ é dada por

$$
\zeta = \frac{R}{2}\sqrt{\frac{IK_\text{VCO}C_1}{2\pi\cdot N}}
$$ {#eq-zeta}

Em que $R$ e $C_1$ são componentes do filtro de loop de segunda ordem (o capacitor $C_2$ é obtido como uma fração de $C_1$, normalmente 1/10) e $I$ é a corrente de saída do Charge Pump @rogers2006IntegratedCircuitDesign.



# Metodologia

Para as simulações apresentadas neste trabalho, foi utilizado o software Simulink Mathworks, além da criação de um algoritmo em Matlab para a obtenção dos parâmetros do sistema com base nas restrições estabelecidas, replicado aqui neste relatório.

```{python}
#| echo: false
t_n = 10e-6
f_r = 10e6
f_o = 50e6
N = 5
f_0 = 50e6
Kvco = 10e6
```

As restrições do projeto deste PLL de exemplo é um PLL Integer-N baseado em PFD/CP. Foi estipulado que o PLL terá um sinal retangular de frequência $f_r=$ `{python} format(f_r)`Hz, e deve fornecer um sinal de saída também retangular e de frequência $f_o=$ `{python} format(f_o)`Hz. Para o VCO, foi determinado um VCO operando livremente em $f_0=$ `{python} format(f_0)`Hz e uma sensibilidade de $K_\text{VCO}=$ `{python} format(Kvco)`Hz/V. Para obter a tensão estável de operação do VCO para que essa frequência seja mantida, manipula-se a [Eq. @eq-frequency-operation-vco] para obter a equação apresentada em [Eq. @eq-voltage-operation-vco].

```{python}
#| echo: false
v_c = (f_o-f_0)/Kvco
```

$$
v_c=\frac{f_o-f_0}{K_\text{VCO}}
$$ {#eq-voltage-operation-vco}

Aplicando-se os valores à [Eq. @eq-voltage-operation-vco], obtém-se que o VCO deve estabilizar-se com uma tensão de `{python} v_c` V.

Caso deseja-se manipular junto a variável de divisão da frequência, $N$, manipula-se a [Eq. @eq-frequency-operation-vco-N] para obter

$$
v_c=\frac{Nf_r-f_0}{K_\text{VCO}}
$$ {#eq-voltage-operation-vco-N}

```{python}
#| echo: false
v_c_N = (f_r*N-f_0)/Kvco
N_hip = 4
v_c_N_hip = (f_r*N_hip-f_0)/Kvco
f_r_hip =20e6
v_c_fr_hip = (f_r_hip*N-f_0)/Kvco
```

Com os valores aplicados, obtém-se o mesmo resultado, ou seja, $v_c=$ `{python} v_c_N` V. Para fins de reflexão, se o divisor for alterado para $N=$ `{python} N_hip`, a tensão estabilizaria em `{python} format(v_c_N_hip)`V. Outro exemplo seria caso a frequência de referência fosse alterada para $f_r=$ `{python} format(f_r_hip)`Hz, a tensão na entrada do VCO seria de `{python} format(v_c_fr_hip)`V.

Portanto, já sabe-se que para as condições atuais de operação, o sistema deve se estabilizar com $v_c=$ `{python} v_c_N` V.

```{python}
#| echo: false
import math

f_n=1/t_n
omega_n = 2*math.pi*f_n
zeta = 0.707
I_CP=1e-3
```

Além das restrições de frequência de operação, também foi estipulado um tempo de acomodação da resposta $t_n=$ `{python} format(t_n)`s. Portanto a frequência natural de operação do sistema é $f_n=$ `{python} format(f_n)`Hz ou $\omega_n=$ `{python} format_with_pi_latex(omega_n)`rad/s. Além disso, foram estabelecidos, arbitrariamente, uma constante de amortecimento $\zeta=$ `{python} zeta` e uma corrente de saída do Charge Pump $I=$ `{python} format(I_CP)`A.

Manipulando-se a [Eq. @eq-omega_n], é possível obter o capacitor $C_1$ como

$$
C_1=\frac{IK_\text{VCO}}{2\pi\cdot N\omega_n^2}
$$ {#eq-C1-capacitor}

```{python}
#| echo: false
import math

C1_val=(I_CP*Kvco)/(2*math.pi*N*omega_n**2)
C2_val=C1_val/10
```

Semelhantemente, pode-se obter o valor de $R$ ao fazer as modificações necessárias na [Eq. @eq-zeta]

$$
R=\zeta\frac{4\pi\cdot N\omega_n}{IK_\text{VCO}}
$$ {#eq-R-resistor}

```{python}
#| echo: false
import math

R1_val=zeta*(4*math.pi*N*omega_n)/(I_CP*Kvco)
```

Com os valores previamente apresentados, obtém-se um filtro de segunda ordem com o resistor $R=$ `{python} format(R1_val)`$\Omega$ e capacitores $C_1=$ `{python} format(C1_val)`F e $C_2=$ `{python} format(C2_val)`F, em que o capacitor $C_2$ foi obtido com a seguinte relação

$$
C_2=\frac{C_2}{10}
$$

Com esses componentes, a função de transferência do filtro de loop é dado por

```{python}
#| echo: false
import sympy as sp
from IPython.display import display, Markdown

# Define variáveis simbólicas
s, C1, C2, R1 = sp.symbols('s C1 C2 R1')

# Define a função simbólica
Fnum = s * C1 * R1 + 1
Fden = s**2 * C1 * C2 * R1 + s * (C1 + C2)
F = Fnum / Fden

# Substitui os valores
F_subs = F.subs({C1: C1_val, C2: C2_val, R1: R1_val}).evalf(4)

# Converte para LaTeX
latex_str = sp.latex(F_subs)

# Exibe o LaTeX
display(Markdown(f"$$F(s) = {latex_str}$$ {{#eq-filter-transfer-function}}"))
```

Dessa forma, a equação [Eq. @eq-filter-transfer-function] apresenta a função de transferência do filtro de loop que é utilizada no diagrama de blocos no domínio da fase apresentado na [Fig. @fig-phase-domain-system]. Como pode-se perceber, para excitar o sistema utiliza-se uma função *step*. Representando, assim, uma alteração repentina da fase seguido por um valor contínuo da mesma.

![Diagrama de blocos do sistema no domínio da fase](../images/phase_domain_system.png){#fig-phase-domain-system}

Observa-se, também, que como a frequência é a variação temporal da fase @rogers2006IntegratedCircuitDesign, ou seja,

$$
\omega=\frac{d\theta}{dt}
$$ {#eq-relation-frequency-phayse}

a função *step* serve somente para um teste inicial e não representa o sistema por completo, uma vez que os sinais constantes antes e depois do step representam um sinal com frequência nula.

A outra simulação foi um teste do sistema do mesmo PLL no domínio do tempo. Essa simulação foi construída utilizando os blocos do pacote *Mixed-Signal Blockset* do Simulink. O sistema utilizado na simulação pode ser visualizado na [Fig. @fig-time-domain-system].

![Diagrama de blocos do sistema no domínio do tempo](../images/time_domain_system.png){#fig-time-domain-system}

Nesta simulação, é possível identificar os componentes básicos do PLL, o comparador/detector de fase (PFD), o charge pump, filtro de loop (com os componentes já calculados anteriormente), VCO e o divisor de frequência *Single Modulus* por um número inteiro $N$ (por isso o nome *Integer-N*).

<!--

No filtro de loop, foram aplicados os valores de $C_1$, $C_2$ e $R$, conforme pode-se verificar por meio da [Fig. @fig-configuration-loop-filter].

![Configurações do filtro de loop de segunda ordem](../images/configuration_loop_filter.png){#fig-configuration-loop-filter}

Ao visualizar as configurações do VCO, pode-se perceber que foram devidamente configuradas com os parâmetros de operação do PLL já apresentadas, visualiza-se tal configuração na [Fig. @fig-configuration-vco].

![Configurações do VCO](../images/configuration_VCO.png){#fig-configuration-vco}

Para gerar os sinais de corrente que serão processados pelo filtro de loop, o charge pump é configurado com a corrente pré-estabelecida, conforme pode-se verificar na [Fig. @fig-configuration-charge-pump].

![Configurações do Charge Pump](../images/configuration_charge_pump.png){#fig-configuration-charge-pump}

Por fim, o sinal de entrada do PLL é apresentado na [Fig. @fig-configuration-input].

![Configurações do sinal de entrada](../images/configuration_input_signal.png){#fig-configuration-input}


-->


# Resultados

Como foi calculado anteriormente, o sistema deveria apresentar uma reposta com tempo de estabilização próximo a `{python} format(t_n)`s. Analisando a [Fig. @fig-phase-domain-system-results], a resposta está bem próxima do que foi calculado.

![Curva de resposta do sistema no domínio da fase](../images/phase_domain_system_results.png){#fig-phase-domain-system-results}

Além disso, o padrão da resposta em frequência do sistema em malha fechada é apresentado na [Fig. @fig-closed-loop-response], bem congruente com o que é previsto para um fator de amortecimento $\zeta=$ `{python} zeta` @rogers2006IntegratedCircuitDesign.

![Curva de resposta do sistema em malha fechada no domínio da frequência](../images/closed_loop_response.png){#fig-closed-loop-response}

O objetivo do segundo teste era verificar a capacidade de estabilização do sinal de entrada no VCO. Como pode-se verificar na [Fig. @fig-time-domain-system-results] a estabilização do sinal é extremamente rápida, bem mais rápida do que o que foi apresentado na [Fig. @fig-phase-domain-system-results].

![Curva de resposta do sistema no domínio do tempo](../images/time_domain_system_results.png){#fig-time-domain-system-results}

# Conclusão

A simulação do PLL Integer-N baseado em PFD/CP foi importante para consolidar alguns conhecimentos básicos acerca do funcionamento do PLL Integer-N. Como próximos passos, a intenção é simular o funcionamento de um sistema Fractional-N e iniciar os estudos e simulações dos parâmetros que dificultam o funcionamento do sistema (como jitter e ruído de fase).

Ainda em relação a este trabalho, três pontos ficaram pendentes: 1. Testar o sistema no domínio de fase com um sinal de excitação fidedigno a um sinal com frequência, 2. Verificar porque o sistema no domínio do tempo tem uma resposta tão rápida comparado ao sistema no domínio da fase e excitado por um sinal *step*, 3. Aplicar os critérios de decisão do capacitor $C_2$ do loop ao invés da simplificação utilizada.


# References {-}
