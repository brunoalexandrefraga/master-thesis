---
title: Exploring the Validity Range of PLL Analytical Models
subtitle: Case Study - Example 3.2 from the Reference Material
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
    This report presents the analytical development and performance estimation of a second-order Integer-N Phase-Locked Loop (PLL) based on a Phase-Frequency Detector (PFD) and a Charge Pump (CP). The loop filter is designed to meet specified damping and bandwidth characteristics. The analysis determines the maximum allowable frequency step at the input that ensures the PLL remains in lock, based on the system's maximum normalized phase error. Additionally, the settling time following such a frequency step is estimated using classical control theory. The results provide useful insights into the dynamic behavior of the loop, serving as a theoretical benchmark for future simulation and implementation efforts.
keywords: 
    - Integer-N PLL
    - Loop Dynamics
    - Frequency Step
    - Settling Time 
date: last-modified
bibliography:
  - bibliography.bib
  - zoterobibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}
          \usepackage{comment}
          \usepackage{tikz}
          \usetikzlibrary{shapes,arrows}
          \usetikzlibrary{shapes,arrows,positioning,calc}


          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: Programa de Pós-Graduação em Engenharia Elétrica
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

```{python}
#| echo: false

from IPython.display import display, Markdown

def format(value):
    abs_value = abs(value)
    if abs_value >= 1e9:
        result = f"{value / 1e9:.2f}\\,\\text{{G}}"
    elif abs_value >= 1e6:
        result = f"{value / 1e6:.2f}\\,\\text{{M}}"
    elif abs_value >= 1e3:
        result = f"{value / 1e3:.2f}\\,\\text{{k}}"
    elif abs_value >= 1:
        result = f"{value * 1e0:.2f}\\,"
    elif abs_value >= 1e-3:
        result = f"{value * 1e3:.2f}\\,\\text{{m}}"
    elif abs_value >= 1e-6:
        result = f"{value * 1e6:.2f}\\,\\mu"
    elif abs_value >= 1e-9:
        result = f"{value * 1e9:.2f}\\,\\text{{n}}"
    elif abs_value >= 1e-12:
        result = f"{value * 1e12:.2f}\\,\\text{{p}}"
    elif abs_value >= 1e-15:
        result = f"{value * 1e15:.2f}\\,\\text{{f}}"
    else:
        result = f"{value:.0e}\\,"

    return Markdown(f"${result}$")
```

```{python}
#| echo: false
import math
from IPython.display import display, Markdown

def format_with_pi_latex(value):
    pi_multiple = value / math.pi
    abs_pi_multiple = abs(pi_multiple)

    if abs_pi_multiple >= 1e9:
        result = f"{pi_multiple / 1e9:.2f}\\pi\\,\\text{{G}}"
    elif abs_pi_multiple >= 1e6:
        result = f"{pi_multiple / 1e6:.2f}\\pi\\,\\text{{M}}"
    elif abs_pi_multiple >= 1e3:
        result = f"{pi_multiple / 1e3:.2f}\\pi\\,\\text{{k}}"
    elif abs_pi_multiple >= 1:
        result = f"{pi_multiple:.2f}\\pi"
    elif abs_pi_multiple >= 1e-3:
        result = f"{pi_multiple * 1e3:.2f}\\pi\\,\\text{{m}}"
    elif abs_pi_multiple >= 1e-6:
        result = f"{pi_multiple * 1e6:.2f}\\pi\\,\\mu"
    elif abs_pi_multiple >= 1e-9:
        result = f"{pi_multiple * 1e9:.2f}\\pi\\,\\text{{n}}"
    elif abs_pi_multiple >= 1e-12:
        result = f"{pi_multiple * 1e12:.2f}\\pi\\,\\text{{p}}"
    elif abs_pi_multiple >= 1e-15:
        result = f"{pi_multiple * 1e15:.2f}\\pi\\,\\text{{f}}"
    else:
        result = f"{pi_multiple:.0e}\\pi"

    return Markdown(f"${result}$")

# Exemplo de uso:

```

# Introduction

```{python}
#| echo: false
import math

zeta = 0.707
f_bw = 150e3
omega_bw = 2*math.pi*f_bw
```

This report presents the development of an Integer-N Phase-Frequency Detector/Charge Pump-based Phase-Locked Loop (PFD/CP-PLL) with a second-order loop filter. The loop filter is designed so that the loop bandwidth has a damping factor $\zeta=$ `{python} zeta`, and a 3-dB bandwidth of $f_{3\text{dB}}=$ `{python} format(f_bw)`Hz. The example analyzed in this report is based on the case presented in @rogers2006IntegratedCircuitDesign.

## Objective

The objective of this study is to answer the following two questions:

- What is the maximum frequency step at the input such that the current theoretical model remains valid in predicting the system's behavior?
- Assuming this condition is satisfied, how long will the system take to settle following a frequency step?

# Analysis

## Loop Natural Frequency Calculation

To compute the natural frequency of the loop, the following equation is used:

$$
\begin{split}
\omega_{3\text{dB}}&=\omega_n\sqrt{1+2\zeta^2+\sqrt{4\zeta^4+4\zeta^2+2}}\implies\\
\omega_n&=\frac{\omega_{3\text{dB}}}{\sqrt{1+2\zeta^2+\sqrt{4\zeta^4+4\zeta^2+2}}}
\end{split}
$$

```{python}
#| echo: false
import math

omega_n=omega_bw/math.sqrt(1+2*zeta**2+math.sqrt(4*zeta**4+4*zeta**2+2))
```

Thus, the natural frequency is $\omega_n=$ `{python} format_with_pi_latex(omega_n)`rad/s.

## Maximum Phase Error Instant

Given the value of $\omega_n$, the time instant at which the maximum phase error occurs, $t_m$, can be computed using:

$$
t_m=\frac{1}{\omega_n\sqrt{1-\zeta^2}}\tan^{-1}\left(\frac{\sqrt{1-\zeta^2}}{\zeta}\right)
$$

```{python}
#| echo: false
import math

t_m=1/(omega_n*math.sqrt(1-zeta**2))*math.atan(math.sqrt(1-zeta**2)/zeta)
```

## Maximum Normalized Phase Error

Using the value of $t_m$, the maximum normalized phase error for a frequency step, $\theta_{e_\text{m,n}}$, is given by:

$$
\begin{split}
\theta_{e_\text{m,n}}&=\frac{\sin\left(\omega_n\sqrt{1-\zeta^2}t_m\right)}{\sqrt{1-\zeta^2}}e^{-\zeta\omega_nt_m}
\end{split}
$$

```{python}
#| echo: false
import math

theta_e_m_n = math.sin(omega_n*math.sqrt(1-zeta**2)*t_m)/(math.sqrt(1-zeta**2))*math.e**(-zeta*omega_n*t_m)
theta_e_m = 2 * math.pi
```

As a result, the maximum normalized phase error is approximately `{python} round(theta_e_m_n, 2)`.

## Maximum Allowed Frequency Step

This normalized value can be used in the following non-normalized equation for the phase error:

$$
\begin{split}
\theta_e(t)&=\frac{\Delta\omega}{\omega_n}\frac{\sin\left(\omega_n\sqrt{1-\zeta^2}t\right)}{\sqrt{1-\zeta^2}}e^{-\zeta\omega_nt}
\end{split}
$$

The goal is to find the maximum input frequency step, $\Delta\omega_m$, such that the maximum phase error does not exceed $\theta_{e_m}=2\pi$. Using the normalized result:

$$
\begin{split}
\theta_{e_m}&=\frac{\Delta\omega_m}{\omega_n}\theta_{e_\text{m,n}}\implies\\
\Delta\omega_m&=\frac{\theta_{e_m\omega_n}}{\theta_{e_\text{m,n}}}
\end{split}
$$

```{python}
#| echo: false
import math

step_m_ang=theta_e_m*omega_n/theta_e_m_n
step_m_lin = step_m_ang/2/math.pi
```

Substituting the calculated values yields:

- $\Delta\omega_m=$ `{python} format_with_pi_latex(step_m_ang)`rad/s
- $\Delta f_m=$ `{python} format(step_m_lin)`Hz

Hence, the maximum input frequency step that still allows theoretical predictability is `{python} format(step_m_lin)`Hz. If the input frequency step exceeds this limit, the PLL may lose lock and exhibit cycle slipping (more details are provided in the next section).

## Settling Time Estimation

The settling time, $t_s$, required for the system to reach a steady state after a frequency step can be approximated by:

$$
t_s\approx\frac{-\ln\left(0.01\sqrt{1-\zeta^2}\right)}{\zeta}\frac{1}{\omega_n}
$$

```{python}
#| echo: false
import math

t_s=math.log(0.01*math.sqrt(1-zeta**2), math.e)/(zeta*omega_n)*(-1)
```

This results in a settling time of $t_s=$ `{python} format(t_s)`s.


<!-- TODO: Prepare simulations to verify these responses -->

# Cycle Slipping

Cycle slipping is an undesired phenomenon in Phase-Locked Loops (PLLs) that occurs when the phase error between the reference input and the feedback output exceeds the linear range of the system.

Cycle slipping occurs when the PLL is unable to maintain phase lock, and the phase error grows beyond $2\pi$, resulting in a temporary loss of synchronization. The loop then slips by one or more full cycles before attempting to reacquire lock.

# Simulation

```{python}
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
from control import tf, forced_response

# Parâmetros do sistema (exemplo)
zeta = 0.707
omega_n = 2 * np.pi * 1e6  # frequência natural rad/s

# Função de transferência de 2ª ordem (erro de fase)
num = [omega_n**2]
den = [1, 2*zeta*omega_n, omega_n**2]
H = tf(num, den)

# Excitação: rampa de fase (equivale a step de frequência)
t = np.linspace(0, 10e-6, 1000)
delta_omega = 2 * np.pi * 5e6  # step de 5 MHz
theta_ref = delta_omega * t  # rampa de fase

# Simulação
t_out, y_out, _ = forced_response(H, T=t, U=theta_ref)

# Plot
plt.figure()
plt.plot(t_out * 1e6, y_out, label='Erro de fase (rad)')
plt.xlabel('Tempo (us)')
plt.ylabel('Erro de fase')
plt.grid(True)
plt.legend()
plt.title('Resposta ao step de frequência')
plt.show()
```

# Conclusion

This report provides a theoretical analysis of a second-order PFD/CP-based Integer-N PLL. The maximum tolerable frequency step for which the linear model remains valid was derived, and the corresponding settling time was estimated. These results serve as a foundation for further simulation and validation studies.

# References {-}
