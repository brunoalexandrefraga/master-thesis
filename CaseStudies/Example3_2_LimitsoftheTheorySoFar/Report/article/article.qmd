---
title: Exploring the Validity Range of PLL Analytical Models
subtitle: Case Study - Example 3.2 from the Reference Material
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
    Example 3.2.
keywords: 
    - Integer-N PLL
    - Loop Dynamics
    - Frequency Step
    - Settling Time 
date: last-modified
bibliography:
  - bibliography.bib
  - zoterobibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}
          \usepackage{comment}
          \usepackage{tikz}
          \usetikzlibrary{shapes,arrows}
          \usetikzlibrary{shapes,arrows,positioning,calc}


          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: Programa de Pós-Graduação em Engenharia Elétrica
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

```{python}
#| echo: false

from format_utils import format, format_graph, format_no_markdown, format_with_pi_latex

```

```{python}
#| echo: false
import math

zeta = 0.707
f_bw = 150e3
omega_bw = 2*math.pi*f_bw
```

```{python}
#| echo: false
import math

omega_n=omega_bw/math.sqrt(1+2*zeta**2+math.sqrt(4*zeta**4+4*zeta**2+2))
```

```{python}
#| echo: false
import math

t_m=1/(omega_n*math.sqrt(1-zeta**2))*math.atan(math.sqrt(1-zeta**2)/zeta)
```


```{python}
#| echo: false
import math

theta_e_m_n = math.sin(omega_n*math.sqrt(1-zeta**2)*t_m)/(math.sqrt(1-zeta**2))*math.e**(-zeta*omega_n*t_m)
#theta_e_m = 2 * math.pi
theta_e_m = 1.62435 * math.pi
```

```{python}
#| echo: false
import math

step_m_ang=theta_e_m*omega_n/theta_e_m_n
step_m_lin = step_m_ang/2/math.pi
```

```{python}
#| echo: false
import math

t_s=math.log(0.01*math.sqrt(1-zeta**2), math.e)/(zeta*omega_n)*(-1)
```



```{python}
#| echo: false

import numpy as np

# Parâmetros iniciais
f_r = 10e6 # Hz
omega_r = 2 * np.pi * f_r # rad/s
fvco = f_o = 50e6 # Hz
omega_o = 2 * np.pi * f_r # rad/s
N = 5
Kvco = KVCO = 2 * np.pi * 10e6 # rad/s/V
Kvco_lin = Kvco / (2 * np.pi) # Hz/V
I_CP = I = 1e-3
K_theta = Kphase = I / (2 * np.pi) # A/rad
A0 = 1
K = A0 * Kphase * KVCO / N
```

```{python}
#| echo: false

from scipy import signal

omega_n = omega_bw / np.sqrt(1 + 2 * zeta**2 + np.sqrt(4 * zeta**4 + 4 * zeta**2 + 2))
f_n = omega_n/2/np.pi
```

```{python}
#| echo: false

# Parâmetros do PLL
C_1 = C1 = K / omega_n**2
C_2 = C2 = C1 / 10
R_1 = R1 = 2 * zeta * omega_n / K
```


```{python}
#| echo: false

from scipy import signal
from IPython.display import display, Markdown

def format_eng(x):
    if x == 0:
        return "0"
    exponent = int("{:.0e}".format(x).split('e')[1])
    base = x / (10**exponent)
    return f"{base:.2f}e{exponent}"

def poly_to_str(coeffs):
    terms = []
    degree = len(coeffs) - 1
    for i, coef in enumerate(coeffs):
        power = degree - i
        if abs(coef) < 1e-12:  # ignora coeficientes muito pequenos
            continue
        term = ""
        coef_str = format_eng(coef)
        if not (abs(coef - 1) < 1e-12 and power != 0):
            term += coef_str
        if power > 0:
            term += "s"
            if power > 1:
                term += f"^{power}"
        terms.append(term)
    return " + ".join(terms)
```


```{python}
#| echo: false

# Numerador e denominador do compensador F(s)
# F(s) = (s*C1*R1 + 1) / (s^2*C1*C2*R1 + s*(C1 + C2))
F_num = [C1 * R1, 1]
F_den = [C1 * C2 * R1, C1 + C2, 0]

F_sys = signal.TransferFunction(F_num, F_den)
```

```{python}
#| echo: false
# Em scipy.signal, num e den são arrays dentro de listas (mesmo para SISO)
num = F_sys.num[0][0] if isinstance(F_sys.num[0], (list, tuple)) else F_sys.num
den = F_sys.den[0][0] if isinstance(F_sys.den[0], (list, tuple)) else F_sys.den

num_str = poly_to_str(num)
den_str = poly_to_str(den)

# Exibe como equação no Jupyter
display(Markdown(f"$$F(s) = \\frac{{{num_str}}}{{{den_str}}}$$ {{#eq-tf-filter-numeric}}"))

```


```{python}
#| echo: false
# F(s) * K / s = G(s)
G_num = np.polymul(F_num, [K])
G_den = np.polymul(F_den, [1, 0])  # Multiplica por s

G_sys = signal.TransferFunction(G_num, G_den)
```


```{python}
#| echo: false
# Em scipy.signal, num e den são arrays dentro de listas (mesmo para SISO)
num = G_sys.num[0][0] if isinstance(G_sys.num[0], (list, tuple)) else G_sys.num
den = G_sys.den[0][0] if isinstance(G_sys.den[0], (list, tuple)) else G_sys.den

num_str = poly_to_str(num)
den_str = poly_to_str(den)

# Exibe como equação no Jupyter
display(Markdown(f"$$G(s) = \\frac{{{num_str}}}{{{den_str}}}$$ {{#eq-tf-open-loop-numeric}}"))
```

```{python}
#| echo: false
# H(s) = G(s) / (1 + G(s))
H_num = G_num
H_den = np.polyadd(G_den, G_num)

# Criando o sistema de tempo contínuo
H_sys = signal.TransferFunction(H_num, H_den)
```


```{python}
#| echo: false
# Em scipy.signal, num e den são arrays dentro de listas (mesmo para SISO)
num = H_sys.num[0][0] if isinstance(H_sys.num[0], (list, tuple)) else H_sys.num
den = H_sys.den[0][0] if isinstance(H_sys.den[0], (list, tuple)) else H_sys.den

num_str = poly_to_str(num)
den_str = poly_to_str(den)

# Exibe como equação no Jupyter
display(Markdown(f"$$H(s) = \\frac{{{num_str}}}{{{den_str}}}$$ {{#eq-tf-closed-loop-numeric}}"))
```


```{python}
#| echo: false
 
# Agora temos o denominador completo
# O_sys = H_sys * N
# Para isso, O_sys = (H_num * N) / (H_den)
num_O = np.convolve(H_sys.num, [N])
den_O = np.convolve(H_sys.den, [1])

# Criar a função de transferência final
O_sys = signal.TransferFunction(num_O, den_O)
```

```{python}
#| echo: false
# Em scipy.signal, num e den são arrays dentro de listas (mesmo para SISO)
num = O_sys.num[0][0] if isinstance(O_sys.num[0], (list, tuple)) else O_sys.num
den = O_sys.den[0][0] if isinstance(O_sys.den[0], (list, tuple)) else O_sys.den

num_str = poly_to_str(num)
den_str = poly_to_str(den)

# Exibe como equação no Jupyter
display(Markdown(f"$$O(s) = \\frac{{{num_str}}}{{{den_str}}}$$ {{#eq-tf-output-phase-numeric}}"))
```


```{python}
#| echo: false
 
# Kvco/s => [Kvco] / [1, 0]
Kvco_over_s = ([Kvco], [1, 0])

# F_sys => ([1], [1, 1]) já está
# Multiplicando numeradores e denominadores via convolução
num_den = np.convolve([1/N], Kvco_over_s[0])
num_den = np.convolve(num_den, F_sys.num)
num_den = np.convolve(num_den, [K_theta])
num_den = np.convolve(num_den, [A0])

den_den = np.convolve(Kvco_over_s[1], F_sys.den)

# Agora temos o denominador completo
# E_sys = H_sys / (den)
# Para isso, E_sys = (H_num * den_den) / (H_den * den_num)
num_E = np.convolve(H_sys.num, den_den)
den_E = np.convolve(H_sys.den, num_den)

# Criar a função de transferência final
E_sys = signal.TransferFunction(num_E, den_E)
```

```{python}
#| echo: false
# Em scipy.signal, num e den são arrays dentro de listas (mesmo para SISO)
num = E_sys.num[0][0] if isinstance(E_sys.num[0], (list, tuple)) else E_sys.num
den = E_sys.den[0][0] if isinstance(E_sys.den[0], (list, tuple)) else E_sys.den

num_str = poly_to_str(num)
den_str = poly_to_str(den)

# Exibe como equação no Jupyter
display(Markdown(f"$$E(s) = \\frac{{{num_str}}}{{{den_str}}}$$ {{#eq-tf-phase-error-numeric}}"))
```


```{python}
#| echo: false

# Vc_sys = H_sys / ((1/N)*(Kvco/s))
#Kvco_over_s = ([Kvco], [1, 0])
Kvco_over_s = ([Kvco], [1])
den_num = np.convolve([1/N], Kvco_over_s[0])
den_den = Kvco_over_s[1]

num_Vc = np.convolve(H_sys.num, den_den)
den_Vc = np.convolve(H_sys.den, den_num)

Vc_sys = signal.TransferFunction(num_Vc, den_Vc)
```

```{python}
#| echo: false
# Em scipy.signal, num e den são arrays dentro de listas (mesmo para SISO)
num = Vc_sys.num[0][0] if isinstance(Vc_sys.num[0], (list, tuple)) else Vc_sys.num
den = Vc_sys.den[0][0] if isinstance(Vc_sys.den[0], (list, tuple)) else Vc_sys.den

num_str = poly_to_str(num)
den_str = poly_to_str(den)

# Exibe como equação no Jupyter
display(Markdown(f"$$V_C(s) = \\frac{{{num_str}}}{{{den_str}}}$$ {{#eq-tf-vctrl-vco-numeric}}"))
```


```{python}
#| echo: false

import numpy as np

omega_r_safe = omega_n*10
f_r_safe = omega_r_safe/2/np.pi

omega_r_max = omega_n * 2 * np.pi * zeta
f_r_max = omega_r_max/2/np.pi
```





































```{python}
#| echo: false

sim_stop_time = 50e-6
sim_points = 10000
step_amplitude = f_r
```



```{python}
#| echo: false
#| label: fig-step-freq-h
#| fig-cap: "Frequency step response of the closed-loop transfer function."
#| fig-align: center

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Criar vetor da entrada (degrau de amplitude 5)
u = np.ones_like(t) * step_amplitude

# Simulação da resposta ao degrau via lsim
t_out, y_out, _ = signal.lsim(H_sys, U=u, T=t)

# Valor final da resposta
final_value = y_out[-1]
tol = 0.01 * final_value  # 1% da resposta final

# Encontrar o tempo em que a resposta entra e permanece na faixa de ±1%
ts_graphical = 0
within_bounds = np.abs(y_out - u) <= tol
for i in range(len(within_bounds)):
    if all(within_bounds[i:]):
        ts_graphical = t_out[i]
        break

# Gerar gráfico
plt.figure(figsize=(8, 6))
plt.plot(t_out * 1e6, y_out, label='Feedback frequency')
plt.plot(t_out * 1e6, u, linestyle=':', color='black', label='Reference frequency')
plt.axhline(final_value + tol, color='red', linestyle='--', linewidth=0.8, label='±1% Tolerance')
plt.axhline(final_value - tol, color='red', linestyle='--', linewidth=0.8)
plt.axvline(ts_graphical * 1e6, color='green', linestyle='--', linewidth=1.2, label=f'Settling time: {ts_graphical*1e6:.5f} µs')
plt.xlabel('Time (µs)')
plt.ylabel('Frequency (Hz)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```





```{python}
#| echo: false
#| label: fig-ramp-phase-h
#| fig-cap: "Phase response to a ramp input in the closed-loop transfer function."
#| fig-align: center

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Criar vetor da entrada (degrau de amplitude 5)
step_amplitude = omega_r * t
u = np.ones_like(t) * step_amplitude

# Simulação da resposta ao degrau via lsim
t_out, y_out, _ = signal.lsim(H_sys, U=u, T=t)

# Gerar gráfico
plt.figure(figsize=(8, 6))
plt.plot(t_out * 1e6, y_out, label='Feedback Phase')
plt.plot(t_out * 1e6, u, linestyle=':', color='black', label='Reference Phase')
plt.xlabel('Time (µs)')
plt.ylabel('Phase (rad)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```



```{python}
#| echo: false
#| label: fig-ramp-phase-h-o
#| fig-cap: "Comparison of phase responses to a ramp input in two different functions."
#| fig-align: center

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Criar vetor da entrada (degrau de amplitude 5)
step_amplitude = omega_r * t
u = np.ones_like(t) * step_amplitude

# Simulação da resposta ao degrau via lsim
t_out, y_out, _ = signal.lsim(H_sys, U=u, T=t)
t_out, y_out2, _ = signal.lsim(O_sys, U=u, T=t)

# Gerar gráfico
plt.figure(figsize=(8, 6))
plt.plot(t_out * 1e6, y_out, label='Feedback Phase')
plt.plot(t_out * 1e6, y_out2, label='Output Phase')
plt.plot(t_out * 1e6, u, linestyle=':', color='black', label='Reference Phase')
plt.xlabel('Time (µs)')
plt.ylabel('Phase (rad)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```










```{python}
#| echo: false
#| label: fig-ramp-phase-step-freq-h
#| fig-cap: "Phase response to a ramp with an abrupt frequency change (frequency step)."
#| fig-align: center

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Frequências
f_base = omega_r  # 10 MHz
f_step = step_m_ang # step de 10 MHz
t_step = 20e-6  # instante do step

# Entrada em fase: integral da frequência
phi_in = np.where(
    t < t_step,
    f_base * t,
    f_base * t + f_step * (t - t_step)
)

# Simulação da resposta
t_out, y_out, _ = signal.lsim(H_sys, U=phi_in, T=t)



### --- Gráfico ---
plt.figure(figsize=(8, 6))
plt.plot(t_out * 1e6, y_out, label='Feedback Phase')
plt.plot(t_out * 1e6, phi_in, linestyle=':', color='black', label='Reference Phase')

plt.axvline(t_step * 1e6, color='purple', linestyle='--', linewidth=1.2, label='Step Frequency Instant')

plt.xlabel('Time (µs)')
plt.ylabel('Phase (rad)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

```






```{python}
#| echo: false
#| label: fig-ramp-phase-h-phase-error
#| fig-cap: "Response to a ramp input with phase error."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Entrada: rampa em fase (step de 10 MHz em frequência)
# Fase = ∫ frequência ⇒ rampa
freq_step = omega_r  # Step de 10 MHz em frequência
phi_in = freq_step * t  # Rampa de fase

# Simulação da resposta do sistema à rampa
t_out, phi_out, _ = signal.lsim(H_sys, U=phi_in, T=t)

# Erro de seguimento
tracking_error = phi_in - phi_out



# Plotagem
plt.figure(figsize=(8, 6))
plt.plot(t_out * 1e6, phi_in, linestyle=':', color='black', label='Reference Phase')
plt.plot(t_out * 1e6, phi_out, label='Feedback Phase')
plt.plot(t_out * 1e6, tracking_error, label='Phase Error')
plt.xlabel('Time (µs)')
plt.ylabel('Phase (rad)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

```


```{python}
#| echo: false
#| label: fig-step-freq-e
#| fig-cap: "Phase error response to a frequency step input."
#| fig-align: center

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Criar vetor da entrada (degrau de amplitude 5)
step_amplitude = step_m_ang* t
u = np.ones_like(t) * step_amplitude

# Simulação da resposta ao degrau via lsim
t_out, y_out, _ = signal.lsim(E_sys, U=u, T=t)

# Cálculo do valor máximo (pico)
max_value = np.max(np.abs(y_out))
tol = 0.01 * max_value  # 1% do valor de pico (centrado em zero)

# Novo cálculo do tempo de acomodação (settling time)
within_bounds = np.abs(y_out) <= tol
ts_graphical_peak = 0
for i in range(len(within_bounds)):
    if all(within_bounds[i:]):
        ts_graphical_peak = t_out[i]
        break

# Gerar gráfico
plt.figure(figsize=(8, 6))
plt.plot(t_out * 1e6, y_out, label='Phase Error')

# Linha no valor máximo (positivo)
plt.axhline(max_value, color='blue', linestyle=':', linewidth=1.2, label=f'Max Value: {max_value:.3f}')

# Linhas horizontais em ±1% do valor de pico (em torno de zero)
plt.axhline(tol, color='red', linestyle='--', linewidth=0.8, label=f'±1% Tolerance')
plt.axhline(-tol, color='red', linestyle='--', linewidth=0.8)

# Marcação do novo tempo de acomodação
plt.axvline(ts_graphical_peak * 1e6, color='green', linestyle='--', linewidth=1.2, label=f'Settling Time: {ts_graphical_peak*1e6:.3f} μs')

plt.xlabel('Time (µs)')
plt.ylabel('Phase Error (rad)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()


```




```{python}
#| echo: false
#| label: fig-step-freq-e-norm
#| fig-cap: "Normalized phase error response to a frequency step input."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Tempo de simulação
t = np.linspace(0, 8/omega_n, sim_points)

# Criar vetor da entrada (degrau de amplitude 5)
step_amplitude = t
u = np.ones_like(t) * step_amplitude

# Simulação da resposta ao degrau via lsim
t_out, y_out, _ = signal.lsim(E_sys, U=u, T=t)

y_out *= omega_n

# Cálculo do valor máximo (pico)
theta_e_m_n_meas = np.max(np.abs(y_out))
tol = 0

# Gerar gráfico
plt.figure(figsize=(8, 6))
plt.plot(t_out * omega_n, y_out, label='Step Response')

# Linha no valor máximo (positivo)
plt.axhline(theta_e_m_n_meas, color='blue', linestyle=':', linewidth=1.2, label=f'Max Value: {theta_e_m_n_meas:.3f}')

# Linhas horizontais em ±1% do valor de pico (em torno de zero)
plt.axhline(tol, color='black', linestyle=':')


plt.xlabel('Time (µs)')
plt.ylabel('Phase Error norm. (rad)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()


```









```{python}
#| echo: false
#| label: fig-step-freq-vc
#| fig-cap: "Control voltage response to a frequency step input."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import TransferFunction, step

# Tempo de simulação
t = np.linspace(0, sim_stop_time, sim_points)

# Resposta ao degrau
t, vc_response = step(Vc_sys, T=t)
vc_response *= step_m_lin

# Valor final (assumido ou estimado)
final_value = ((f_r+step_m_lin) * N - f_o) / KVCO
#final_value = 0.5
tol = 0.01 * final_value  # 1% de tolerância
upper_bound = final_value + tol
lower_bound = final_value - tol

# Encontrar settling time: busca o primeiro instante em que o sinal entra e permanece dentro da faixa de tolerância
within_bounds = np.logical_and(vc_response >= lower_bound, vc_response <= upper_bound)

# Janela de amostras para verificar se permanece dentro da tolerância
window_size = 3*150  # ~5% da simulação

ts_graphical = 0
for i in range(len(within_bounds) - window_size):
    if np.all(within_bounds[i:i + window_size]):
        ts_graphical = t[i]
        break

# Plotagem
plt.figure(figsize=(8, 6))
plt.plot(t * 1e6, vc_response, label='Voltage Control')
plt.axhline(upper_bound, color='red', linestyle='--', linewidth=0.8, label='±1% Tolerance')
plt.axhline(lower_bound, color='red', linestyle='--', linewidth=0.8)

if ts_graphical is not None:
    plt.axvline(ts_graphical * 1e6, color='green', linestyle='--', linewidth=1.2,
                label=f'Settling time: {ts_graphical*1e6:.2f} µs')

plt.xlabel('Time (µs)')
plt.ylabel('Voltage Control (V)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()


```




```{python}
#| echo: false
#| label: fig-step-freq-vc-norm
#| fig-cap: "Normalized control voltage response to a frequency step input."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import TransferFunction, step

# Tempo de simulação
t = np.linspace(0, 8/omega_n, sim_points)

# Resposta ao degrau
t, vc_response = step(Vc_sys, T=t)
vc_response *= Kvco / N

# Valor final (assumido ou estimado)
final_value = ((f_r+step_m_lin) * N - f_o) / KVCO
final_value *= KVCO / (step_m_lin* N)
#final_value = 0.5

# Janela de amostras para verificar se permanece dentro da tolerância
window_size = 50  # ~5% da simulação

# Plotagem
plt.figure(figsize=(8, 6))
plt.plot(t * omega_n, vc_response, label='Voltage Control')
plt.axhline(final_value, color='black', linestyle=':', label='Reference Voltage')


plt.xlabel('Tempo (µs)')
plt.ylabel('Voltage Control norm. (V)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()


```


```{python}
#| echo: false
#| label: fig-bode-g
#| fig-cap: "Bode plot of the open-loop transfer function."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Gerar a resposta em frequência
w, mag, phase = signal.bode(G_sys)

# Plotando o diagrama de Bode
plt.figure(figsize=(8, 6))

# Magnitude
plt.subplot(2, 1, 1)
plt.semilogx(w, mag, label='Magnitude (dB)')
plt.ylabel('Magnitude (dB)')
plt.grid(True, which="both", ls="--")
plt.legend()

# Fase
plt.subplot(2, 1, 2)
plt.semilogx(w, phase)
plt.ylabel('Phase (degrees)')
plt.xlabel('Frequency (rad/s)')
plt.grid(True, which="both", ls="--")

plt.tight_layout()
plt.show()
```



```{python}
#| echo: false
#| label: fig-bode-h
#| fig-cap: "Bode plot of the closed-loop transfer function."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Gerar a resposta em frequência
w, mag, phase = signal.bode(H_sys)

# Encontrar o ponto onde a magnitude cruza -3 dB
cutoff_index = np.argmax(mag <= -3)
cutoff_freq_ang = w[cutoff_index]
f_bw_meas = cutoff_freq_lin = cutoff_freq_ang/2/np.pi
cutoff_mag = mag[cutoff_index]

# Plotando o diagrama de Bode
plt.figure(figsize=(8, 6))

# Magnitude
plt.subplot(2, 1, 1)
plt.semilogx(w, mag, label='Magnitude (dB)')
plt.axvline(x=cutoff_freq_ang, color='r', linestyle='--', label='Cutoff Frequency (-3 dB)')
plt.axhline(y=-3, color='gray', linestyle=':', label='-3 dB')
plt.scatter(cutoff_freq_ang, cutoff_mag, color='red')  # Marcar o ponto

# Adiciona o valor da frequência no gráfico
plt.text(cutoff_freq_ang, cutoff_mag - 5, f'{format_graph(cutoff_freq_lin)}Hz', color='red',
         ha='center', va='top', fontsize=9, bbox=dict(facecolor='white', edgecolor='red', boxstyle='round'))

plt.ylabel('Magnitude (dB)')
plt.grid(True, which="both", ls="--")
plt.legend()

# Fase
plt.subplot(2, 1, 2)
plt.semilogx(w, phase)
plt.axvline(x=cutoff_freq_ang, color='r', linestyle='--')
plt.ylabel('Phase (degrees)')
plt.xlabel('Frequency (rad/s)')
plt.grid(True, which="both", ls="--")

plt.tight_layout()
plt.show()
```





```{python}
#| echo: false
#| label: fig-bode-f
#| fig-cap: "Bode plot of the filter transfer function."
#| fig-align: center


import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Gerar a resposta em frequência
w, mag, phase = signal.bode(F_sys)

# Encontrar o ponto onde a magnitude cruza -3 dB
cutoff_index = np.argmax(mag <= -3)
cutoff_freq_ang = w[cutoff_index]
cutoff_freq_lin = cutoff_freq_ang/2/np.pi
cutoff_mag = mag[cutoff_index]

# Plotando o diagrama de Bode
plt.figure(figsize=(8, 6))

# Magnitude
plt.subplot(2, 1, 1)
plt.semilogx(w, mag, label='Magnitude (dB)')

plt.ylabel('Magnitude (dB)')
plt.grid(True, which="both", ls="--")
plt.legend()

# Fase
plt.subplot(2, 1, 2)
plt.semilogx(w, phase)
plt.ylabel('Phase (degrees)')
plt.xlabel('Frequency (rad/s)')
plt.grid(True, which="both", ls="--")

plt.tight_layout()
plt.show()
```






```{python}
#| echo: false

from scipy import signal
import numpy as np

# Obter os polos do sistema
poles = H_sys.poles

# Considerar o polo com parte imaginária positiva (se complexo)
p = poles[np.imag(poles) > 0][0] if any(np.imag(poles) > 0) else poles[0]

# Frequência natural e constante de amortecimento
omega_n_meas = np.abs(p)
zeta_meas = -np.real(p) / omega_n_meas

print(f"Polos: {poles}")
print(f"ωn (frequência natural): {omega_n_meas:.6e} rad/s")
print(f"ζ (constante de amortecimento): {zeta_meas:.6f}")

```

```{python}
#| echo: false

import math
import numpy as np

# Análise de resposta em frequência
theta_e_m_meas = 1.84746594 * np.pi

step_m_ang_meas = theta_e_m_meas * omega_n / theta_e_m_n_meas
step_m_lin_meas = step_m_ang_meas / (2 * math.pi)

print(f"Máximo step de frequência: {step_m_lin_meas:.6f}")
```



| **Symbol**       | **Description**  | **Value**                                          |
|------------------|------------------|-------------------------------------------------   |
| $C_1$            | Series capacitor | `{python} format(C_1)`F                            |
| $R_1$            | Series resistor  | `{python} format(R_1)`$\Omega$                     |
| $C_2$            | Shunt capacitor  | `{python} format(C_2)`F                            |
| $f_\mathrm{VCO}$ | VCO freq.        | `{python} format(fvco)`Hz                          |
| $K_\mathrm{VCO}$ | VCO sensivity    | `{python} format(Kvco_lin)`Hz/V                    |
| $\theta_{e_m}$   | Max. Phase Error | `{python} format_with_pi_latex(theta_e_m_meas)`rad |
| $I_\mathrm{CP}$  | CP Current       | `{python} format(I_CP)`A                           |
| $A_0$            | DC Gain          | `{python} format(A0)`                              |
| $f_\mathrm{bw}$  | Bandwidth        | `{python} format(f_bw_meas)`Hz                     |
| $f_r$            | Ref. freq.       | `{python} format(f_r)`Hz                           |
| $N$              | Divider          | `{python} format(N)`                               |
| $\Delta f_m$     | Max. Step freq.  | `{python} format(step_m_lin_meas)`Hz               |
| $t_s$            | Settling time    | `{python} format(t_s)`s                            |


