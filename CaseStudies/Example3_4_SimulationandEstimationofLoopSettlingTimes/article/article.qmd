---
title: Estimation of Fractional-N PLL Linearity Limits and Cycle Slipping
subtitle: Case Study - Example 3.4 from the Reference Material
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
    This report presents the design and analysis of a fractional-N frequency synthesizer based on a charge pump phase-locked loop (CP-PLL) architecture. The system comprises a voltage-controlled oscillator (VCO), a charge pump, a reference oscillator, and a second-order loop filter. Key parameters such as the loop bandwidth, natural frequency, and damping factor are used to guide the filter design. The settling time is estimated for different frequency steps, and the system’s response is evaluated for both linear and nonlinear operating regions. The methodology follows a continuous-time approach.
keywords: 
    - Fractional-N PLL
    - Linearity Limit
    - Cycle Slipping
    - Nonlinear Dynamics
date: last-modified
bibliography:
  - bibliography.bib
  - zoterobibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}
          \usepackage{comment}
          \usepackage{tikz}
          \usetikzlibrary{shapes,arrows}
          \usetikzlibrary{shapes,arrows,positioning,calc}


          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: Programa de Pós-Graduação em Engenharia Elétrica
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

```{python}
#| echo: false

from IPython.display import display, Markdown

def format(value, decimals=2):
    abs_value = abs(value)
    fmt = f".{decimals}f"
    
    if abs_value >= 1e9:
        result = f"{value / 1e9:{fmt}}\\,\\text{{G}}"
    elif abs_value >= 1e6:
        result = f"{value / 1e6:{fmt}}\\,\\text{{M}}"
    elif abs_value >= 1e3:
        result = f"{value / 1e3:{fmt}}\\,\\text{{k}}"
    elif abs_value >= 1:
        result = f"{value * 1e0:{fmt}}\\,"
    elif abs_value >= 1e-3:
        result = f"{value * 1e3:{fmt}}\\,\\text{{m}}"
    elif abs_value >= 1e-6:
        result = f"{value * 1e6:{fmt}}\\,\\mu"
    elif abs_value >= 1e-9:
        result = f"{value * 1e9:{fmt}}\\,\\text{{n}}"
    elif abs_value >= 1e-12:
        result = f"{value * 1e12:{fmt}}\\,\\text{{p}}"
    elif abs_value >= 1e-15:
        result = f"{value * 1e15:{fmt}}\\,\\text{{f}}"
    else:
        result = f"{value:.0e}\\,"

    return Markdown(f"${result}$")

```

```{python}
#| echo: false
import math
from IPython.display import display, Markdown

def format_with_pi_latex(value):
    pi_multiple = value / math.pi
    abs_pi_multiple = abs(pi_multiple)

    if abs_pi_multiple >= 1e9:
        result = f"{pi_multiple / 1e9:.2f}\\pi\\,\\text{{G}}"
    elif abs_pi_multiple >= 1e6:
        result = f"{pi_multiple / 1e6:.2f}\\pi\\,\\text{{M}}"
    elif abs_pi_multiple >= 1e3:
        result = f"{pi_multiple / 1e3:.2f}\\pi\\,\\text{{k}}"
    elif abs_pi_multiple >= 1:
        result = f"{pi_multiple:.2f}\\pi"
    elif abs_pi_multiple >= 1e-3:
        result = f"{pi_multiple * 1e3:.2f}\\pi\\,\\text{{m}}"
    elif abs_pi_multiple >= 1e-6:
        result = f"{pi_multiple * 1e6:.2f}\\pi\\,\\mu"
    elif abs_pi_multiple >= 1e-9:
        result = f"{pi_multiple * 1e9:.2f}\\pi\\,\\text{{n}}"
    elif abs_pi_multiple >= 1e-12:
        result = f"{pi_multiple * 1e12:.2f}\\pi\\,\\text{{p}}"
    elif abs_pi_multiple >= 1e-15:
        result = f"{pi_multiple * 1e15:.2f}\\pi\\,\\text{{f}}"
    else:
        result = f"{pi_multiple:.0e}\\pi"

    return Markdown(f"${result}$")

# Exemplo de uso:

```

```{python}
#| echo: false

import math

f0=3.7e9
f = 4.3e9
tunning_range = f-f0
step=1e6
fref = 40e6
I_CP=2*math.pi*100e-6
V_sup=3
f_3dB=150e3
omega_3dB=f_3dB*2*math.pi

Kvco=tunning_range/V_sup
Kvco_ang=Kvco*2*math.pi

f_30M=30e6
f_300M=300e6

Ktheta=I_CP/(2*math.pi)

fvco=4e9
N = fvco/fref
```

# Introduction

A `{python} format(f0)`Hz–`{python} format(f)`Hz synthesizer with a step size of `{python} format(step)`Hz is required. A `{python} format(fref)`Hz crystal oscillator, a charge pump with `{python} format(I_CP)`A output current, and a VCO (operating from a `{python} format(V_sup)`V supply) are available. The objective is to design a fractional-N synthesizer with a loop bandwidth of `{python} format(f_3dB)`Hz using these components. The settling time of the loop must be estimated for frequency steps of `{python} format(f_30M)`Hz and `{python} format(f_300M)`Hz. Simulation results should then be analyzed and compared. This example is adapted from @rogers2006IntegratedCircuitDesign.

# Design Methodology

## Voltage-Controlled Oscillator (VCO)

The VCO operates with a supply voltage of `{python} format(V_sup)`V and offers a tuning range of `{python} format(tunning_range)`Hz. Therefore, the VCO gain constant is given by $K_\text{VCO}=$ `{python} format(Kvco)`Hz/V. The nominal frequency is arbitrarily selected as $f_\text{VCO}=$ `{python} format(fvco)`Hz. With this nominal frequency, the corresponding division ratio is $N=$ `{python} N`.

## Charge pump

Given the known charge pump current, the charge pump gain constant can be expressed as $K_\theta=$ `{python} format(Ktheta)`A/rad.

## Loop filter

```{python}
#| echo: false

import math

fref_f3dB=fref/f_3dB
```

Since the ratio of the reference frequency to the loop bandwidth is $f_\text{ref}/f_{3\text{dB}}=$ `{python} round(fref_f3dB, 0)`, i.e., $f_\text{ref}\gg f_{3\text{dB}}$, a continuous-time analysis is appropriate for this system.

The loop filter design begins with the calculation of the natural frequency:

$$
\omega_n=\frac{\omega_{3\text{dB}}}{\sqrt{1+2\zeta^2+\sqrt{4\zeta^4+4\zeta^2+2}}}
$$

```{python}
#| echo: false
import math

zeta = 0.707

omega_n=omega_3dB/math.sqrt(1+2*zeta**2+math.sqrt(4*zeta**4+4*zeta**2+2))
f_n=omega_n/(2*math.pi)
```

Using the chosen damping factor $\zeta=$ `{python} zeta`, the natural frequency is $f_n=$ `{python} format(f_n)`Hz.

The value of the first capacitor, $C_1$, is determined by:


$$
C_1=\frac{IK_\text{VCO}}{2\pi\cdot N\omega_n^2}
$$

```{python}
#| echo: false
import math

C_1=I_CP*Kvco_ang/(2*math.pi*N*omega_n**2)

```

This results in $C_1=$ `{python} format(C_1)`F.

The first resistor in the second-order loop filter is given by:



$$
R_1=2\zeta\sqrt{\frac{2\pi\cdot N}{IK_\text{VCO}C_1}}
$$

```{python}
#| echo: false

import math 

R_1=2*zeta*math.sqrt((2*math.pi*N)/(I_CP*Kvco_ang*C_1))
C_2=C_1/10
```

Thus, the value of the resistor is $R_1=$ `{python} format(R_1)`$\Omega$. The second capacitor is typically chosen to be one-tenth of $C_1$, yielding $C_2=$ `{python} format(C_2)`F.



## System Testing and Performance Estimation

```{python}
#| echo: false
import math

t_m=1/(omega_n*math.sqrt(1-zeta**2))*math.atan(math.sqrt(1-zeta**2)/zeta)
```

```{python}
#| echo: false
import math

theta_e_m_n = math.sin(omega_n*math.sqrt(1-zeta**2)*t_m)/(math.sqrt(1-zeta**2))*math.e**(-zeta*omega_n*t_m)
theta_e_m = 2 * math.pi
```

```{python}
#| echo: false
import math

step_m_ang=theta_e_m*omega_n/theta_e_m_n
step_m_lin = step_m_ang/2/math.pi
```

The maximum tolerable input frequency step for this configuration is $\Delta\omega_m=$ `{python} format_with_pi_latex(step_m_ang)`rad/s, equivalent to `{python} format(step_m_lin)`Hz.



```{python}
#| echo: false
import math

f_i_30M = f_30M/N
f_i_30M_ang = f_i_30M*2*math.pi
f_i_300M = f_300M/N
f_i_300M_ang = f_i_300M*2*math.pi
```

```{python}
#| echo: false
import math

omega_n__t_s=math.log(0.01*math.sqrt(1-zeta**2), math.e)/(zeta)*(-1)
t_s=omega_n__t_s/omega_n
```


Given output frequency steps of `{python} format(f_30M)`Hz and `{python} format(f_300M)`Hz, the corresponding reference frequency steps are `{python} format(f_i_30M)`Hz and `{python} format(f_i_300M)`Hz, respectively.

The first frequency step lies within the linear range and thus must settle within a predictable time interval, computed via the $\omega_nt_s$ relationship. The settling time is found to be $t_s=$ `{python} format(t_s)`s.

In contrast, the `{python} format(f_i_300M)`Hz frequency step exceeds the linear region, resulting in cycle slipping. The acquisition time in this nonlinear case is estimated using the equation:


$$
T_s=\frac{\Delta\omega}{\pi\omega_n^2}
$$

```{python}
#| echo: false
import math

Ts = f_i_300M_ang/(math.pi*omega_n**2)
Total_ts=Ts+t_s
```

Accordingly, the acquisition time is $T_s=$ `{python} format(Ts)`s. An additional `{python} format(t_s)`s is required for phase locking, leading to a total locking time of `{python} format(Total_ts)`s for a `{python} format(f_i_300M)`Hz step.

<!--```{python}
#| echo: false
import sympy as sp
from IPython.display import display, Markdown

# Variáveis simbólicas
s = sp.symbols('s')
I_sym, Kvco_sym, R1_sym, C1_sym, N_sym = sp.symbols('I Kvco R1 C1 N')

# Constante K = (I * Kvco) / (2π)
K_sym = (I_sym * Kvco_sym) / (2 * sp.pi)

# Numerador e denominador da função de transferência
num = K_sym / C1_sym * (1 + R1_sym * C1_sym * s)
den = s**2 + (K_sym * R1_sym / N_sym) * s + K_sym / (N_sym * C1_sym)

# Função de transferência
H_s = num / den

# Substitui os valores
H_subs = H_s.subs({I_sym: I_CP, Kvco_sym: Kvco_ang, C1_sym: C_1, R1_sym: R_1, N_sym: N}).evalf(4)

# Converte para LaTeX
latex_str = sp.latex(H_subs)

display(Markdown(f"$$\\frac{{\\varphi_\\text{{no}}(s)}}{{\\varphi_\\text{{nI}}(s)}} = {latex_str}$$"))
```-->

# Conclusion

A fractional-N PLL synthesizer was designed using the provided specifications and components. The loop filter parameters were calculated based on continuous-time modeling, and the loop performance was evaluated under both linear and nonlinear frequency step scenarios. Settling times were estimated analytically. Further validation through simulation is necessary to confirm theoretical predictions.

# References {-}
